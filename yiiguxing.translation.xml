<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="530" />
    <option name="newTranslationDialogX" value="773" />
    <option name="newTranslationDialogY" value="663" />
    <histories>
      <item value="Configure the behaviour of how this member is treated in the {@code equals} and {@code hashCode} implementation; if on a method, include the method's return value as part of calculating hashCodeequality." />
      <item value="@return If {@code true}, always use direct field access instead of calling the getter method." />
      <item value="Normally, if getters are available, those are called. To suppress this and let the generated code use the fields directly, set this to {@code true}." />
      <item value="Will soon be marked {@code @Deprecated}; use the {@code @EqualsAndHashCode.Include} annotation together with {@code @EqualsAndHashCode(onlyExplicitlyIncluded = true)}." />
      <item value="Inspection" />
      <item value="DTO for presenting and selecting an itinerary from a collection of candidates." />
      <item value="Can also be used with method level validation, indicating that a specific class is supposed to be validated at the method level (acting as a pointcut for the corresponding validation interceptor), but also optionally specifying the validation groups for method-level validation in the annotated class. Applying this annotation at the method level allows for overriding the validation groups for a specific method but does not serve as a pointcut; a class-level annotation is nevertheless necessary to trigger method validation for a specific bean to begin with. Can also be used as a meta-annotation on a custom stereotype annotation or a custom group-specific validated annotation." />
      <item value="Variant of JSR-303's {@link javax.validation.Valid}, supporting the specification of validation groups. Designed for convenient use with Spring's JSR-303 support but not JSR-303 specific. &lt;p&gt;Can be used e.g. with Spring MVC handler methods arguments. Supported through {@link org.springframework.validation.SmartValidator}'s validation hint concept, with validation group classes acting as hint objects. &lt;p&gt;Can also be used with method level validation, indicating that a specific class is supposed to be validated at the method level (acting as a pointcut for the corresponding validation interceptor), but also optionally specifying the validation groups for method-level validation in the annotated class. Applying this annotation at the method level allows for overriding the validation groups for a specific method but does not serve as a pointcut; a class-level annotation is nevertheless necessary to trigger method validation for a specific bean to begin with. Can also be used as a meta-annotation on a custom stereotype annotation or a custom group-specific validated annotation." />
      <item value="Variant" />
      <item value="Asserts that the annotated string, collection, map or array is not {@code null} or empty." />
      <item value="Validate that the annotated string is not {@code null} or empty. The difference to {@code NotEmpty} is that trailing whitespaces are getting ignored." />
      <item value="邀请者" />
      <item value="newly" />
      <item value="new " />
      <item value="Thaw" />
      <item value="delimiter" />
      <item value="This inspection only reports when the suggested replacement does not result in significant performance drawback on modern JVMs. In many cases the String concatenation may perform better." />
      <item value="裂变红包" />
      <item value="裂变" />
      <item value="分裂" />
      <item value="count By FromOpenId" />
      <item value="count ByFromOpenId" />
      <item value="count B yFromOpenId" />
      <item value="countByFromOpenId" />
      <item value="fromOpenId" />
      <item value="invitePlayer" />
      <item value="invitedPlayer" />
      <item value="locale" />
      <item value="Handles cargo booking and routing. Operates against a dedicated remoting service facade, and could easily be rewritten as a thick Swing client. Completely separated from the domain layer, unlike the tracking user interface. &lt;p&gt; In order to successfully keep the domain model shielded from user interface considerations, this approach is generally preferred to the one taken in the tracking controller. However, there is never any one perfect solution for all situations, so we've chosen to demonstrate two polarized ways to build user interfaces." />
      <item value="dedicated" />
      <item value="against" />
      <item value="attempt" />
      <item value="Consumes handling event registration attempt messages and delegates to proper registration." />
      <item value="External" />
      <item value="This facade shields the domain layer - model, services, repositories - from concerns about such things as the user interface." />
      <item value="attachments" />
      <item value="生成" />
      <item value="Corp" />
      <item value="Fail" />
      <item value="unused" />
      <item value="An adapter class, designed for the tracking use case, is used to wrap the domain model to make it easier to work with in a web page rendering context. We do not want to apply view rendering constraints to the design of our domain model, and the adapter helps us shield the domain model classes." />
      <item value="Controller for tracking cargo. This interface sits immediately on top of the domain layer, unlike the booking interface which has a a remote facade and supporting DTOs in between. &lt;p&gt; An adapter class, designed for the tracking use case, is used to wrap the domain model to make it easier to work with in a web page rendering context. We do not want to apply view rendering constraints to the design of our domain model, and the adapter helps us shield the domain model classes." />
      <item value="immediately" />
      <item value="inspection" />
      <item value="received Handling Event Registration Attempt" />
      <item value="A cargo has arrived at its final destination" />
      <item value="A cargo has been misdirected" />
      <item value="misdirected" />
      <item value="领取" />
      <item value="Uniquely identifies a particular cargo. Automatically generated by the application." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="347" />
        <entry key="ENGLISH" value="348" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="1" />
        <entry key="GUJARATI" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1627895957116" />
  </component>
</application>